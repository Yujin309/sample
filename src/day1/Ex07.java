package day1;
//비트 연산자
//비트연산자란 
//2개의 정수를
//2진법으로 바꿔서
//연산하는 연산자이다.
//AND연산, OR연산 , XOR연산, 반전 연산, 쉬프트연산
//이 있다

public class Ex07 {
public static void main(String[] args) {
	byte myByte = 6; 
	// 0000 0110 -> 2의 1승 * 1+2의 2승 *1 
	byte myByte2 = 7; 
	// 0000 0111 -> 2의 1승 * 1+2의 1승 *1+2의 2승 *1
	
	//1.AND연산
	// 0000 0110
	// 0000 0111 
	// 0000 0110 -> 6
	System.out.println(myByte & myByte2);
	
	//2. OR연산 (|)
    //	두자리중 한자리만 1이라도 1
	// 0000 0110
	// 0000 0111
	// 0000 0111 -> 7
	System.out.println(myByte | myByte2);
	
	//3.XOR연산 (^) 둘다 1이면 0
	// 0000 0110
	// 0000 0111
	// 0000 0001 -> 1
    System.out.println(myByte ^ myByte2);

    //4.반전 연산자 (~)
    // 0000 0110
    // 1111 1001 -> -7
    System.out.println(~myByte);
    
    //컴퓨터에서 
    //맨 앞자리는 0이면 +
    //1이면 - 이다
    // 그럼 양의 최대수는 0111 1111 이 된다
    //그럼 여기에 +1이 되면
    // 1000 0000이 되고 이것은 음의 최소수 (-128)이 된다
    // overflow가 일어나게 되는것이다.
    
    //shift 연산
    // << >> 오른쪽의 숫자만큼 자릿수를 이동한다.
    // mybyte <<3
    //왼쪽으로 3자리 이동시킨다
    // 0000 0110 을 왼쪽으로 3자리 이동시킨다.
    // 0000 0110 000 (뒤에다가 0 3개 넣기)
    // 왼쪽에 있는 0 3개를 지워주기 
    // 0 0110 000 = 자릿수 맞춰주기
    // 0011 0000 -> 48
    
    // myByte >> 3
    // 0000 0110 
    // 000 0000 0110 (왼쪽에 0 3개 붙이기)
    // 000 0000 0 

    // 0000 0000 -> 0 
    System.out.println(myByte >> 3);
    
    //오른쪽으로 보낼때에는
    //맨 앞의 숫자를 붙여준다.
    myByte = -127;
    // myByte >> 2
    // 1000 0001
    // 11 1000 0001
    // 11 1000 00
    // 1110 0000
    System.out.println(myByte >> 2);
    
   //오른쪽으로 자릿수 이동하고
    //왼쪽은 0으로 채워라
    // myByte >>>2
    // 1000 0001
    // (>>>2) 3자리가 나오면 0으로 채우게 됨
    // 00 1000 0001
    // 00 1000 00 (오른쪽의 2자리 없애기)
    // 0010 0000 -> 32
    System.out.println(myByte >>> 2);
    
    //이미지 처리할때 사용.
    
    
}
}
